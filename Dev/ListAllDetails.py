# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ListAllDetails.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from bson.objectid import ObjectId
import pymongo
import time

global patientID
global patientName

patientName = "NULL"

patientID = sys.argv[1]
doctorOccupation = sys.argv[2]
requestID = sys.argv[3]

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(791, 392)
        MainWindow.setStyleSheet("font: 8pt \"Space Grotesk\";")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(630, 200, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Space Grotesk")
        font.setPointSize(-1)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("/* QPushButton Style */\n"
"QPushButton {\n"
"    background-color: #000; /* Black */\n"
"    border: none;\n"
"    color: #FFF; /* White */\n"
"    padding: 12px 24px;\n"
"    text-align: center;\n"
"    text-decoration: none;\n"
"    display: inline-block;\n"
"    font-size: 16px;\n"
"    margin: 4px 2px;\n"
"    transition-duration: 0.4s;\n"
"    cursor: pointer;\n"
"    border-radius: 8px;\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"    background-color: #333; /* Darker Gray */\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"    background-color: #666; /* Even Darker Gray */\n"
"    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n"
"}\n"
"")
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(10, 10, 361, 81))
        self.label_7.setObjectName("label_7")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(10, 100, 611, 271))
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setStyleSheet("""
                    QTextBrowser {
                        background-color: #f9f9f9;
                        color: #333;
                        font-family: Arial, sans-serif;
                        font-size: 14px;
                        border: 1px solid #ccc;
                        padding: 10px;
                        border-radius: 5px;
                    }
                    QTextBrowser QScrollBar:vertical {
                        width: 10px;
                        background: #f1f1f1;
                        border: 1px solid #ccc;
                    }
                    QTextBrowser QScrollBar::handle:vertical {
                        background: #aaa;
                        border-radius: 5px;
                    }
                    QTextBrowser QScrollBar::add-line:vertical,
                    QTextBrowser QScrollBar::sub-line:vertical {
                        background: none;
                    }
                """)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(630, 320, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Space Grotesk")
        font.setPointSize(-1)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_5.setFont(font)
        self.pushButton_5.setStyleSheet("/* QPushButton Style */\n"
            "QPushButton {\n"
            "    background-color: #000; /* Black */\n"
            "    border: none;\n"
            "    color: #FFF; /* White */\n"
            "    padding: 12px 24px;\n"
            "    text-align: center;\n"
            "    text-decoration: none;\n"
            "    display: inline-block;\n"
            "    font-size: 16px;\n"
            "    margin: 4px 2px;\n"
            "    transition-duration: 0.4s;\n"
            "    cursor: pointer;\n"
            "    border-radius: 8px;\n"
            "}\n"
            "\n"
            "QPushButton:hover {\n"
            "    background-color: #333; /* Darker Gray */\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    background-color: #666; /* Even Darker Gray */\n"
            "    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n"
            "}\n"
        "")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(630, 260, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Space Grotesk")
        self.pushButton_3.hide()
        font.setPointSize(-1)
        font.setBold(False)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(50)
        font.setStrikeOut(False)
        self.pushButton_6.setFont(font)
        self.pushButton_6.setStyleSheet("/* QPushButton Style */\n"
            "QPushButton {\n"
            "    background-color: #000; /* Black */\n"
            "    border: none;\n"
            "    color: #FFF; /* White */\n"
            "    padding: 12px 24px;\n"
            "    text-align: center;\n"
            "    text-decoration: none;\n"
            "    display: inline-block;\n"
            "    font-size: 16px;\n"
            "    margin: 4px 2px;\n"
            "    transition-duration: 0.4s;\n"
            "    cursor: pointer;\n"
            "    border-radius: 8px;\n"
            "}\n"
            "\n"
            "QPushButton:hover {\n"
            "    background-color: #333; /* Darker Gray */\n"
            "}\n"
            "\n"
            "QPushButton:pressed {\n"
            "    background-color: #666; /* Even Darker Gray */\n"
            "    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n"
            "}\n"
        "")
        self.pushButton_6.setObjectName("pushButton_6")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.pushButton_6.clicked.connect(self.openPrescriptionDialog)
        self._update_timer = QtCore.QTimer()
        # self._update_timer.start(500)
        # self._update_timer.timeout.connect(self.showPatientDetails)
        self.retranslateUi(MainWindow)
        self.showPatientDetails()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton_5.clicked.connect(self.openChangeDoctorDialog)

    def showPatientDetails(self):
        global patientID
        textPatientID = patientID
        patientID = ObjectId(patientID)
        client = pymongo.MongoClient("mongodb://localhost:27017/")
        db = client.Hospital
        collection = db.Patients
        # Retrieve all the data
        result = collection.find_one({"_id": patientID})
        db2 = client.Hospital
        collection2 = db2.Patient_Requests
        systemAutoSelectDetails = collection2.find_one({"patientOriginalID": textPatientID, "doctor": doctorOccupation, "_id": ObjectId(requestID)})

        # Create a formatted string for displaying the patient details
        if result:
            formatted_result = (
                f"<h2>Patient Details</h2><br>"
                f"<b>Patient ID:</b> {result['_id']}<br>"
                f"<b>User Name:</b> {result['UserName']}<br>"
                f"<b>Password:</b> {result['Password']}<br>"
                f"<b>Age:</b> {result['Age']}<br>"
                f"<b>Blood Group:</b> {result['BloodGroup']}<br>"
                f"<b>Email:</b> {result['Email']}<br>"
                f"<b>Disorders:</b> {result['Disorders']}<br>"
                f"<b>Address:</b> {result['Address']}<br>"
                f"<b>Gender:</b> {result['Gender']}<br>"
                f"<b>Marital Status:</b> {result['MaritalStatus']}<br>"
            )
        else:
            formatted_result = "No patient found with the given ID."

        if systemAutoSelectDetails:
            additional_result = (
                f"<h2>Request Details</h2><br>"
                f"<b>Request Time:</b> {systemAutoSelectDetails['time']}<br>"
                f"<b>Patient Request ID:</b> {systemAutoSelectDetails['_id']}<br>"
                f"<b>User Name:</b> {systemAutoSelectDetails['UserName']}<br>"
                f"<b>Symptoms:</b> {', '.join(systemAutoSelectDetails['symptoms'])}<br>"
                f"<b>Additional:</b> {systemAutoSelectDetails['additional']}<br>"
                f"<b>Status:</b> {systemAutoSelectDetails['status']}<br>"
                f"<b>Doctor:</b> {systemAutoSelectDetails['doctor']}<br>"
                f"<b>Original Patient ID:</b> {systemAutoSelectDetails['patientOriginalID']}<br>"
            )
            formatted_result += "<hr>" + additional_result
        else :
            formatted_result += "<hr><h2>Request Details</h2><br>No Request Found"
        self.textBrowser.setHtml(formatted_result)
        print(formatted_result)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Patient Details"))
        self.pushButton_3.setText(_translate("MainWindow", "Submit"))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:24pt;\">Patient Details</span></p><p><span style=\" font-size:10pt;\">User : "+patientID+"</span></p></body></html>"))
        self.pushButton_5.setText(_translate("MainWindow", "Change Dr."))
        self.pushButton_6.setText(_translate("MainWindow", "Prescribe"))


    def openPrescriptionDialog(self):
        self.prescriptionDialog = QtWidgets.QDialog()
        self.prescriptionDialog.setWindowTitle("Write Prescription")
        self.prescriptionDialog.resize(400, 300)

        layout = QtWidgets.QVBoxLayout()

        self.prescriptionTextEdit = QtWidgets.QTextEdit(self.prescriptionDialog)
        layout.addWidget(self.prescriptionTextEdit)

        saveButton = QtWidgets.QPushButton("Save Prescription", self.prescriptionDialog)
        saveButton.clicked.connect(self.savePrescription)
        layout.addWidget(saveButton)

        self.prescriptionDialog.setLayout(layout)
        self.prescriptionDialog.exec_()

    def savePrescription(self):
        global patientID, requestID, doctorOccupation
        prescription = self.prescriptionTextEdit.toPlainText()
        client = pymongo.MongoClient("mongodb://localhost:27017/")
        db = client.Hospital
        collection = db.Patient_Prescriptions
        # Retrive current Time
        timeAndDate = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
        prescription_data = {
            "originalPatientID": str(patientID),
            "prescription": prescription,
            "PrescriptionTime": timeAndDate,
            "doctor": doctorOccupation,
            "requestID": requestID
        }

        collection.insert_one(prescription_data)
        self.prescriptionDialog.accept()
        QtWidgets.QMessageBox.information(None, "Success", "Prescription saved successfully.")

    def openChangeDoctorDialog(self):
        self.dialog = QtWidgets.QDialog()
        self.dialog.setWindowTitle("Change Doctor")
        self.dialog.resize(300, 200)
        layout = QtWidgets.QVBoxLayout()

        self.doctorComboBox = QtWidgets.QComboBox(self.dialog)
        self.loadDoctors()
        layout.addWidget(self.doctorComboBox)

        selectButton = QtWidgets.QPushButton("Select", self.dialog)
        selectButton.clicked.connect(self.changeDoctor)
        layout.addWidget(selectButton)

        self.dialog.setLayout(layout)
        self.dialog.exec_()

    def loadDoctors(self):
        client = pymongo.MongoClient("mongodb://localhost:27017/")
        db = client.Hospital
        collection = db.doctors
        doctors = collection.find()
        self.doctorComboBox.clear()
        for doctor in doctors:
            self.doctorComboBox.addItem(doctor['name'], doctor['occupation'])

    def changeDoctor(self):
        selectedDoctorId = self.doctorComboBox.currentData()
        client = pymongo.MongoClient("mongodb://localhost:27017/")
        db = client.Hospital
        collection = db.Patient_Requests
        collection.update_one({"patientOriginalID": str(patientID)}, {"$set": {"doctor": selectedDoctorId}})
        self.dialog.accept()
        self.showPatientDetails()

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
